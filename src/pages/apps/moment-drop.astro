---
// MomentDrop Wedding Photo Sharing - Astro Page Component
// This component provides a complete photo upload and gallery interface
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>MomentDrop - Wedding Photos</title>
    <style>
      /* MomentDrop - Wedding Photo Sharing App Styles */

      :root {
        --primary-gold: #f5e6d3;
        --secondary-navy: #2c3e50;
        --accent-pink: #f8bbd9;
        --text-dark: #34495e;
        --white: #ffffff;
        --light-gray: #f8f9fa;
        --shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        --border-radius: 12px;
      }

      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: 'Georgia', serif;
        background: linear-gradient(
          135deg,
          var(--primary-gold) 0%,
          var(--white) 100%
        );
        min-height: 100vh;
        color: var(--text-dark);
        line-height: 1.6;
      }

      .container {
        max-width: 600px;
        margin: 0 auto;
        padding: 20px;
        min-height: 100vh;
        display: flex;
        flex-direction: column;
      }

      .header {
        text-align: center;
        margin-bottom: 2rem;
        padding: 2rem 0;
      }

      .title {
        font-size: 3rem;
        color: var(--secondary-navy);
        margin-bottom: 0.5rem;
        font-weight: bold;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
      }

      .subtitle {
        font-size: 1.2rem;
        color: var(--text-dark);
        font-style: italic;
        opacity: 0.8;
      }

      .main-content {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 2rem;
      }

      .upload-section {
        background: var(--white);
        border-radius: var(--border-radius);
        padding: 2rem;
        box-shadow: var(--shadow);
        border: 2px solid var(--primary-gold);
      }

      .camera-container {
        width: 100%;
        max-width: 400px;
        margin: 0 auto 2rem;
        border-radius: var(--border-radius);
        overflow: hidden;
        box-shadow: var(--shadow);
        min-height: 300px;
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
        background: #f8f9fa;
      }

      .camera-placeholder {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: var(--border-radius);
        z-index: 1;
      }

      .placeholder-content {
        text-align: center;
        color: var(--text-dark);
      }

      .placeholder-logo {
        font-size: 4rem;
        margin-bottom: 1rem;
        opacity: 0.7;
      }

      .placeholder-content h2 {
        font-size: 2rem;
        margin-bottom: 0.5rem;
        color: var(--secondary-navy);
        font-weight: bold;
      }

      .placeholder-content p {
        font-size: 1rem;
        opacity: 0.8;
        margin: 0;
      }

      #cameraVideo {
        width: 100%;
        height: auto;
        display: none;
        background: var(--light-gray);
        position: relative;
        z-index: 2;
      }

      .camera-container.active #cameraVideo {
        display: block;
      }

      .camera-container.active .camera-placeholder {
        display: none;
      }

      .photo-preview {
        text-align: center;
        margin-bottom: 2rem;
      }

      #previewImage {
        max-width: 100%;
        max-height: 400px;
        border-radius: var(--border-radius);
        box-shadow: var(--shadow);
        margin-bottom: 1rem;
      }

      .preview-controls {
        display: flex;
        flex-direction: column;
        gap: 1rem;
      }

      #photoLabel {
        width: 100%;
        padding: 12px 16px;
        border: 2px solid var(--primary-gold);
        border-radius: var(--border-radius);
        font-size: 1rem;
        font-family: 'Arial', sans-serif;
        background: var(--white);
        color: var(--text-dark);
      }

      #photoLabel:focus {
        outline: none;
        border-color: var(--accent-pink);
        box-shadow: 0 0 0 3px rgba(248, 187, 217, 0.2);
      }

      .button-group {
        display: flex;
        gap: 1rem;
        justify-content: center;
      }

      .camera-controls {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        align-items: center;
      }

      .btn {
        padding: 14px 28px;
        border: none;
        border-radius: var(--border-radius);
        font-size: 1.1rem;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.3s ease;
        font-family: 'Arial', sans-serif;
        min-height: 44px;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        text-decoration: none;
      }

      .btn-primary {
        background: linear-gradient(
          135deg,
          var(--accent-pink) 0%,
          #e91e63 100%
        );
        color: var(--white);
        box-shadow: var(--shadow);
      }

      .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(233, 30, 99, 0.3);
      }

      .btn-secondary {
        background: var(--white);
        color: var(--text-dark);
        border: 2px solid var(--primary-gold);
      }

      .btn-secondary:hover {
        background: var(--primary-gold);
        transform: translateY(-1px);
      }

      .btn-large {
        font-size: 1.3rem;
        padding: 18px 36px;
        width: 100%;
        max-width: 300px;
      }

      .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none !important;
      }

      .progress-container {
        margin-top: 1rem;
        text-align: center;
      }

      .progress-bar {
        width: 100%;
        height: 8px;
        background: var(--light-gray);
        border-radius: 4px;
        overflow: hidden;
        margin-bottom: 0.5rem;
      }

      .progress-fill {
        height: 100%;
        background: linear-gradient(90deg, var(--accent-pink), #e91e63);
        width: 0%;
        transition: width 0.3s ease;
      }

      .progress-text {
        font-size: 0.9rem;
        color: var(--text-dark);
        opacity: 0.8;
      }

      .message {
        padding: 1rem;
        border-radius: var(--border-radius);
        text-align: center;
        font-weight: bold;
        margin-top: 1rem;
      }

      .message.success {
        background: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
      }

      .message.error {
        background: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
      }

      .gallery-link {
        text-align: center;
      }

      .link-button {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 16px 32px;
        background: var(--secondary-navy);
        color: var(--white);
        text-decoration: none;
        border-radius: var(--border-radius);
        font-size: 1.1rem;
        font-weight: bold;
        transition: all 0.3s ease;
        box-shadow: var(--shadow);
      }

      .link-button:hover {
        background: #34495e;
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(44, 62, 80, 0.3);
      }

      .footer {
        text-align: center;
        padding: 2rem 0;
        font-style: italic;
        opacity: 0.7;
        font-size: 0.9rem;
      }

      /* Gallery styles */
      .gallery-section {
        background: var(--white);
        border-radius: var(--border-radius);
        padding: 2rem;
        box-shadow: var(--shadow);
        border: 2px solid var(--primary-gold);
      }

      .gallery-header {
        text-align: center;
        margin-bottom: 2rem;
      }

      .gallery-header h2 {
        color: var(--secondary-navy);
        font-size: 2rem;
        margin-bottom: 0.5rem;
      }

      .folder-info {
        text-align: center;
        margin-bottom: 2rem;
        padding: 1rem;
        background: var(--light-gray);
        border-radius: var(--border-radius);
      }

      .photo-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 1rem;
        margin-top: 2rem;
      }

      .photo-item {
        background: var(--white);
        border-radius: var(--border-radius);
        overflow: hidden;
        box-shadow: var(--shadow);
        transition: transform 0.3s ease;
      }

      .photo-item:hover {
        transform: translateY(-4px);
      }

      .photo-item img {
        width: 100%;
        height: 200px;
        object-fit: cover;
      }

      .photo-info {
        padding: 1rem;
      }

      .photo-label {
        font-weight: bold;
        color: var(--secondary-navy);
        margin-bottom: 0.5rem;
      }

      .photo-timestamp {
        font-size: 0.8rem;
        color: var(--text-dark);
        opacity: 0.7;
      }

      /* Mobile Responsive Design */
      @media (max-width: 768px) {
        .container {
          padding: 15px;
        }

        .title {
          font-size: 2.5rem;
        }

        .subtitle {
          font-size: 1.1rem;
        }

        .upload-section,
        .gallery-section {
          padding: 1.5rem;
        }

        .button-group {
          flex-direction: column;
        }

        .btn {
          width: 100%;
        }

        .photo-grid {
          grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        }
      }

      @media (max-width: 480px) {
        .title {
          font-size: 2rem;
        }

        .header {
          padding: 1rem 0;
          margin-bottom: 1.5rem;
        }

        .upload-section,
        .gallery-section {
          padding: 1rem;
        }

        .btn-large {
          font-size: 1.2rem;
          padding: 16px 24px;
        }

        .photo-grid {
          grid-template-columns: 1fr 1fr;
        }
      }
    </style>
  </head>
  <body>
    <div class="container">
      <header class="header">
        <h1 class="title">📸 MomentDrop</h1>
        <p class="subtitle">Share your wedding moments instantly</p>
      </header>

      <main class="main-content">
        <!-- Upload Section -->
        <section class="upload-section">
          <div id="cameraSection">
            <div class="camera-container" id="cameraContainer">
              <div class="camera-placeholder" id="cameraPlaceholder">
                <div class="placeholder-content">
                  <div class="placeholder-logo">📷</div>
                  <h2>MomentDrop</h2>
                  <p>Capture & share wedding memories</p>
                </div>
              </div>
              <video id="cameraVideo" autoplay playsinline></video>
            </div>

            <div class="camera-controls">
              <button id="startCameraBtn" class="btn btn-primary btn-large"
                >Start Camera</button
              >
              <button
                id="captureBtn"
                class="btn btn-secondary btn-large"
                disabled>📸 Take Photo</button
              >
            </div>
          </div>

          <div id="previewSection" style="display: none;">
            <div class="photo-preview">
              <img id="previewImage" alt="Captured photo preview" />
              <div class="preview-controls">
                <input
                  type="text"
                  id="photoLabel"
                  placeholder="Add a label (optional)"
                  maxlength="30"
                />
                <div class="button-group">
                  <button id="retakeBtn" class="btn btn-secondary"
                    >📷 Retake</button
                  >
                  <button id="uploadBtn" class="btn btn-primary"
                    >📤 Upload Photo</button
                  >
                </div>
              </div>
            </div>
          </div>

          <div
            id="progressSection"
            class="progress-container"
            style="display: none;"
          >
            <div class="progress-bar">
              <div class="progress-fill" id="progressFill"></div>
            </div>
            <div class="progress-text" id="progressText">Uploading...</div>
          </div>

          <div id="messageContainer"></div>
        </section>

        <!-- Gallery Section -->
        <section class="gallery-section">
          <div class="gallery-header">
            <h2>📖 Photo Gallery</h2>
            <p>Recent wedding photos from all guests</p>
            <button id="toggleGalleryBtn" class="btn btn-primary">
              📖 View Gallery
            </button>
          </div>

          <div id="galleryContent" style="display: none;">
            <div id="folderInfo" class="folder-info">
              <p>Loading gallery information...</p>
            </div>

            <div id="photoGrid" class="photo-grid">
              <!-- Photos will be loaded here -->
            </div>

            <div id="galleryMessage" class="message" style="display: none;"></div>
          </div>
        </section>
      </main>

      <footer class="footer">
        <p>Made with ❤️ for your special day</p>
      </footer>
    </div>

    <script type="module">
      // Import all the MomentDrop functionality
      import { CameraManager } from '/src/lib/camera.js'
      import { UploadManager } from '/src/lib/upload.js'
      import { GalleryManager } from '/src/lib/gallery-manager.js'

      // Initialize the application
      class MomentDropApp {
        constructor() {
          this.cameraManager = new CameraManager()
          this.uploadManager = new UploadManager()
          this.galleryManager = new GalleryManager()
          this.currentPhoto = null
          this.galleryVisible = false

          // Initialize DOM element references
          this.startCameraBtn = null
          this.captureBtn = null
          this.cameraVideo = null
          this.cameraContainer = null
          this.previewSection = null
          this.previewImage = null
          this.photoLabel = null
          this.retakeBtn = null
          this.uploadBtn = null
          this.progressSection = null
          this.progressFill = null
          this.progressText = null
          this.messageContainer = null
          this.folderInfo = null
          this.photoGrid = null
          this.galleryMessage = null
          this.toggleGalleryBtn = null
          this.galleryContent = null

          this.initializeElements()
          this.bindEvents()
        }

        initializeElements() {
          // Camera elements
          this.startCameraBtn = document.getElementById('startCameraBtn')
          this.captureBtn = document.getElementById('captureBtn')
          this.cameraVideo = document.getElementById('cameraVideo')
          this.cameraContainer = document.getElementById('cameraContainer')

          // Preview elements
          this.previewSection = document.getElementById('previewSection')
          this.previewImage = document.getElementById('previewImage')
          this.photoLabel = document.getElementById('photoLabel')
          this.retakeBtn = document.getElementById('retakeBtn')
          this.uploadBtn = document.getElementById('uploadBtn')

          // Progress elements
          this.progressSection = document.getElementById('progressSection')
          this.progressFill = document.getElementById('progressFill')
          this.progressText = document.getElementById('progressText')

          // Message container
          this.messageContainer = document.getElementById('messageContainer')

          // Gallery elements
          this.folderInfo = document.getElementById('folderInfo')
          this.photoGrid = document.getElementById('photoGrid')
          this.galleryMessage = document.getElementById('galleryMessage')
          this.toggleGalleryBtn = document.getElementById('toggleGalleryBtn')
          this.galleryContent = document.getElementById('galleryContent')
        }

        bindEvents() {
          this.startCameraBtn.addEventListener('click', () =>
            this.startCamera()
          )
          this.captureBtn.addEventListener('click', () => this.capturePhoto())
          this.retakeBtn.addEventListener('click', () => this.retakePhoto())
          this.uploadBtn.addEventListener('click', () => this.uploadPhoto())
          this.toggleGalleryBtn.addEventListener('click', () => this.toggleGallery())
        }

        async startCamera() {
          try {
            this.startCameraBtn.disabled = true
            this.startCameraBtn.textContent = 'Starting camera...'

            await this.cameraManager.startCamera(this.cameraVideo)

            this.cameraContainer.classList.add('active')
            this.startCameraBtn.style.display = 'none'
            this.captureBtn.disabled = false
            this.captureBtn.style.display = 'block'
          } catch (error) {
            console.error('Camera start error:', error)
            this.showMessage(error.message, 'error')
            this.startCameraBtn.disabled = false
            this.startCameraBtn.textContent = 'Start Camera'
          }
        }

        async capturePhoto() {
          try {
            this.currentPhoto = await this.cameraManager.capturePhoto()
            this.previewImage.src = this.currentPhoto.dataUrl

            // Hide camera section and show preview
            document.getElementById('cameraSection').style.display = 'none'
            this.previewSection.style.display = 'block'
          } catch (error) {
            console.error('Capture error:', error)
            this.showMessage(error.message, 'error')
          }
        }

        retakePhoto() {
          // Show camera section and hide preview
          document.getElementById('cameraSection').style.display = 'block'
          this.previewSection.style.display = 'none'
          this.photoLabel.value = ''
          this.currentPhoto = null
        }

        async uploadPhoto() {
          if (!this.currentPhoto) return

          try {
            this.uploadBtn.disabled = true
            this.progressSection.style.display = 'block'

            const photoUpload = {
              file: this.currentPhoto.file,
              label: this.photoLabel.value.trim(),
              timestamp: new Date()
            }

            await this.uploadManager.uploadPhoto(
              photoUpload,
              (progress) => {
                this.progressFill.style.width = progress.percentage + '%'
                this.progressText.textContent = `Uploading... ${progress.percentage}%`
              }
            )

            this.showMessage('Photo uploaded successfully! 🎉', 'success')
            this.resetForm()
            // Refresh gallery if it's visible
            if (this.galleryVisible) {
              this.loadGallery()
            }
          } catch (error) {
            console.error('Upload error:', error)
            this.showMessage(`Upload failed: ${error.message}`, 'error')
          } finally {
            this.uploadBtn.disabled = false
            this.progressSection.style.display = 'none'
          }
        }

        resetForm() {
          // Reset to initial state
          document.getElementById('cameraSection').style.display = 'block'
          this.previewSection.style.display = 'none'
          this.cameraContainer.classList.remove('active')
          this.startCameraBtn.style.display = 'block'
          this.captureBtn.style.display = 'none'
          this.captureBtn.disabled = true
          this.photoLabel.value = ''
          this.currentPhoto = null

          // Stop camera
          this.cameraManager.stopCamera()
        }

        async toggleGallery() {
          if (this.galleryVisible) {
            // Hide gallery
            this.galleryContent.style.display = 'none'
            this.toggleGalleryBtn.textContent = '📖 View Gallery'
            this.galleryVisible = false
          } else {
            // Show gallery and load photos
            this.galleryContent.style.display = 'block'
            this.toggleGalleryBtn.textContent = '📖 Hide Gallery'
            this.galleryVisible = true
            
            // Load gallery for the first time or refresh
            await this.loadGallery()
          }
        }

        async loadGallery() {
          try {
            // Load folder info
            const folderInfo = await this.galleryManager.getFolderInfo()
            this.folderInfo.innerHTML = `
                        <h3>${folderInfo.name}</h3>
                        <p>📷 ${folderInfo.photoCount} photos shared</p>
                    `

            // Load recent photos
            const photos = await this.galleryManager.getRecentPhotos(20)
            this.displayPhotos(photos)
          } catch (error) {
            console.error('Gallery load error:', error)
            this.showGalleryMessage(
              'Failed to load gallery. Please try again later.',
              'error'
            )
          }
        }

        displayPhotos(photos) {
          if (photos.length === 0) {
            this.photoGrid.innerHTML =
              '<p style="text-align: center; grid-column: 1 / -1; color: var(--text-dark); opacity: 0.7;">No photos yet. Be the first to share a moment! 📸</p>'
            return
          }

          this.photoGrid.innerHTML = photos
            .map(
              (photo) => `
                    <div class="photo-item">
                        <img src="${photo.url}" alt="${photo.label || 'Wedding photo'}" loading="lazy">
                        <div class="photo-info">
                            ${photo.label ? `<div class="photo-label">${photo.label}</div>` : ''}
                            <div class="photo-timestamp">${this.formatTimestamp(photo.timestamp)}</div>
                        </div>
                    </div>
                `
            )
            .join('')
        }

        formatTimestamp(timestamp) {
          const date = new Date(timestamp)
          return (
            date.toLocaleDateString() +
            ' ' +
            date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
          )
        }

        showMessage(message, type = 'info') {
          this.messageContainer.innerHTML = `<div class="message ${type}">${message}</div>`
          setTimeout(() => {
            this.messageContainer.innerHTML = ''
          }, 5000)
        }

        showGalleryMessage(message, type = 'info') {
          this.galleryMessage.innerHTML = message
          this.galleryMessage.className = `message ${type}`
          this.galleryMessage.style.display = 'block'
          setTimeout(() => {
            this.galleryMessage.style.display = 'none'
          }, 5000)
        }
      }

      // Initialize the app when the page loads
      document.addEventListener('DOMContentLoaded', () => {
        new MomentDropApp()
      })
    </script>
  </body>
</html>
